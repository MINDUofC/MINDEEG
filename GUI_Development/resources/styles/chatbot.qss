/*
  Chatbot QSS (Qt Style Sheet)
  - Safe to load globally or per-widget
  - Includes hover/pressed states
  - Includes dynamic property hooks for future animations (e.g., [expanded="true"]) 

  How to opt-in (no code changes required here, but recommended later):
  - Set object names in code for precise targeting:
      Chatbot container widget: setObjectName("ChatbotContainer")
      Toggle button:           setProperty("role", "chat-toggle")
      Chat history:            setObjectName("ChatHistory")
      Chat input:              setObjectName("ChatInput")
  - Optionally set state properties for style changes:
      container.setProperty("expanded", True/False)

  You can still use these styles without object names; generic selectors are provided.
*/

/* ====== Base resets ====== */
* {
  font-family: "Montserrat", "Segoe UI", Arial, sans-serif;
}

/* Subtle default for all line edits and text edits in chatbot area */
QTextEdit, QLineEdit {
  background-color: #FFFFFF;
  color: #0A1F44;
  border: 2px solid #0047B2;
  border-radius: 12px;
  selection-background-color: #85C7F2;
  selection-color: #0A1F44;
}

QLineEdit {
  padding: 8px 12px;
}

QTextEdit {
  padding: 10px 12px;
}

/* ====== Scrollbars for chat history ====== */
QScrollBar:vertical {
  background: transparent;
  width: 10px;
  margin: 6px 2px 6px 0;
}

QScrollBar::handle:vertical {
  background: #85C7F2;
  border-radius: 5px;
  min-height: 24px;
}

QScrollBar::handle:vertical:hover {
  background: #6DBAF0;
}

QScrollBar::add-line:vertical,
QScrollBar::sub-line:vertical {
  height: 0;
}

/* ====== Chatbot container (generic + objectName + state hooks) ====== */
/* Generic fallback if no objectName is set */
QWidget {
  /* no global background here to avoid overriding your app */
}

/* Preferred: give the chatbot container widget objectName "ChatbotContainer" */
QWidget#ChatbotContainer {
  background: rgba(255, 255, 255, 0.0); /* keep transparent, Python handles rounded window */
}

/* Expanded vs collapsed state hooks (set via setProperty("expanded", True/False)) */
QWidget#ChatbotContainer[expanded="true"] {
  /* You can accent borders in expanded mode if desired */
}

QWidget#ChatbotContainer[expanded="false"] {
  /* Collapsed state styling hook */
}

/* ====== Toggle button ====== */
/* Generic QPushButton fallback for a circular chat toggle */
QPushButton[role="chat-toggle"],
QPushButton#ChatToggleButton {
  background-color: #85C7F2;
  color: #0A1F44;
  border: none;
  border-radius: 999px; /* fully rounded */
  padding: 6px; /* slight internal padding */
}

QPushButton[role="chat-toggle"]:hover,
QPushButton#ChatToggleButton:hover {
  background-color: #6DBAF0; /* hover lighten */
}

QPushButton[role="chat-toggle"]:pressed,
QPushButton#ChatToggleButton:pressed {
  background-color: #4FA7E8; /* pressed darker */
}

/* Focus ring for accessibility */
QPushButton[role="chat-toggle"]:focus,
QPushButton#ChatToggleButton:focus {
  outline: none;
  border: 2px solid #0047B2;
}

/* ====== Chat history and input by objectName (recommended) ====== */
QTextEdit#ChatHistory {
  /* Inherit base; add shadow-like border accent */
  border: 2px solid #0047B2;
  border-radius: 12px;
}

QLineEdit#ChatInput {
  border: 2px solid #0047B2;
  border-radius: 12px;
}

/* Hover feedback on inputs */
QLineEdit:hover,
QTextEdit:hover {
  border-color: #1E63D0;
}

/* Focused inputs */
QLineEdit:focus,
QTextEdit:focus {
  border-color: #0047B2;
  background-color: #FFFFFF;
}

/* ====== Placeholder text styling ====== */
QLineEdit::placeholder,
QTextEdit[placeholderText] {
  color: #7A8CA5;
}

/* ====== Optional message bubble styles (if you tag labels with roles) ====== */
QLabel[role="chat-user"] {
  background: #EAF4FF;
  color: #0A1F44;
  border-radius: 10px;
  padding: 8px 10px;
}

QLabel[role="chat-bot"] {
  background: #F5F9FF;
  color: #0A1F44;
  border-radius: 10px;
  padding: 8px 10px;
}

/* ====== Future animation-friendly hooks ======
   While QSS itself does not support time-based animations, you can:
   - Toggle dynamic properties (e.g., [revealed="true"]) from Python
   - Use QPropertyAnimation on QWidget properties (geometry, opacity, etc.)
   - Keep visual states here, animate the transition in Python
*/
QWidget#ChatbotContainer[revealed="false"] {
  /* e.g., slightly dimmed/hidden state */
}

QWidget#ChatbotContainer[revealed="true"] {
  /* e.g., fully visible state */
}


